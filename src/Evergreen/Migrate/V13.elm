module Evergreen.Migrate.V13 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.com/docs/evergreen> for more info.

-}

import Evergreen.V13.Types
import Evergreen.V6.Types
import Lamdera.Migrations exposing (..)
import List
import List.Extra


frontendModel : Evergreen.V6.Types.FrontendModel -> ModelMigration Evergreen.V13.Types.FrontendModel Evergreen.V13.Types.FrontendMsg
frontendModel old =
    ModelMigrated ( migrate_Types_FrontendModel old, Cmd.none )


backendModel : Evergreen.V6.Types.BackendModel -> ModelMigration Evergreen.V13.Types.BackendModel Evergreen.V13.Types.BackendMsg
backendModel _ =
    ModelUnchanged


frontendMsg : Evergreen.V6.Types.FrontendMsg -> MsgMigration Evergreen.V13.Types.FrontendMsg Evergreen.V13.Types.FrontendMsg
frontendMsg old =
    MsgMigrated ( migrate_Types_FrontendMsg old, Cmd.none )


toBackend : Evergreen.V6.Types.ToBackend -> MsgMigration Evergreen.V13.Types.ToBackend Evergreen.V13.Types.BackendMsg
toBackend _ =
    MsgUnchanged


backendMsg : Evergreen.V6.Types.BackendMsg -> MsgMigration Evergreen.V13.Types.BackendMsg Evergreen.V13.Types.BackendMsg
backendMsg _ =
    MsgUnchanged


toFrontend : Evergreen.V6.Types.ToFrontend -> MsgMigration Evergreen.V13.Types.ToFrontend Evergreen.V13.Types.FrontendMsg
toFrontend _ =
    MsgUnchanged


migrate_Types_FrontendModel : Evergreen.V6.Types.FrontendModel -> Evergreen.V13.Types.FrontendModel
migrate_Types_FrontendModel old =
    { key = old.key
    , context = old.context |> migrate_Types_Context
    , inner = old.inner |> migrate_Types_InnerModel
    , seed = old.seed
    }


migrate_Types_Card : Evergreen.V6.Types.Card -> Evergreen.V13.Types.Card
migrate_Types_Card old =
    { guessing = old.guessing
    , answers = old.answers
    , guessFrom = old.guessFrom |> migrate_Types_Property
    , guessTo = old.guessTo |> migrate_Types_Property
    }


migrate_Types_Context : Evergreen.V6.Types.Context -> Evergreen.V13.Types.Context
migrate_Types_Context old =
    { language = old.language |> migrate_Types_Language
    }


migrate_Types_Difficulty : Evergreen.V6.Types.Difficulty -> Evergreen.V13.Types.Difficulty
migrate_Types_Difficulty old =
    case old of
        Evergreen.V6.Types.Easy ->
            Evergreen.V13.Types.Easy

        Evergreen.V6.Types.Normal ->
            Evergreen.V13.Types.Normal

        Evergreen.V6.Types.Hard ->
            Evergreen.V13.Types.Hard


migrate_Types_FrontendMsg : Evergreen.V6.Types.FrontendMsg -> Evergreen.V13.Types.FrontendMsg
migrate_Types_FrontendMsg old =
    case old of
        Evergreen.V6.Types.UrlClicked p0 ->
            Evergreen.V13.Types.UrlClicked p0

        Evergreen.V6.Types.UrlChanged p0 ->
            Evergreen.V13.Types.UrlChanged p0

        Evergreen.V6.Types.Play ->
            Evergreen.V13.Types.Play

        Evergreen.V6.Types.Seed p0 ->
            Evergreen.V13.Types.Seed p0

        Evergreen.V6.Types.Pick p0 ->
            Evergreen.V13.Types.Pick p0

        Evergreen.V6.Types.Next ->
            Evergreen.V13.Types.Next

        Evergreen.V6.Types.ChangeOptions p0 ->
            Evergreen.V13.Types.ChangeOptions (p0 |> migrate_Types_GameOptions)

        Evergreen.V6.Types.Move p0 p1 ->
            Evergreen.V13.Types.Move p0 p1

        Evergreen.V6.Types.SelectForMove p0 ->
            Evergreen.V13.Types.SelectForMove p0


migrate_Types_GameOptions : Evergreen.V6.Types.GameOptions -> Evergreen.V13.Types.GameOptions
migrate_Types_GameOptions old =
    { count = old.count
    , difficulty = old.difficulty |> migrate_Types_Difficulty
    , answersCount = old.answersCount
    , guessPatterns =
        List.Extra.lift2
            (\f t -> ( migrate_Types_Property f, migrate_Types_Property t ))
            old.guessFrom
            old.guessTo
    }


migrate_Types_InnerModel : Evergreen.V6.Types.InnerModel -> Evergreen.V13.Types.InnerModel
migrate_Types_InnerModel old =
    case old of
        Evergreen.V6.Types.Homepage p0 ->
            Evergreen.V13.Types.Homepage (p0 |> migrate_Types_GameOptions)

        Evergreen.V6.Types.Playing p0 ->
            Evergreen.V13.Types.Playing (p0 |> migrate_Types_PlayingModel)

        Evergreen.V6.Types.Finished p0 ->
            Evergreen.V13.Types.Finished
                { options = p0.options |> migrate_Types_GameOptions
                , score = p0.score
                , total = p0.total
                }

        Evergreen.V6.Types.Sorting p0 ->
            Evergreen.V13.Types.Sorting (p0 |> migrate_Types_SortingModel)


migrate_Types_Language : Evergreen.V6.Types.Language -> Evergreen.V13.Types.Language
migrate_Types_Language old =
    case old of
        Evergreen.V6.Types.Arabic ->
            Evergreen.V13.Types.Arabic

        Evergreen.V6.Types.Chinese ->
            Evergreen.V13.Types.Chinese

        Evergreen.V6.Types.Czech ->
            Evergreen.V13.Types.Czech

        Evergreen.V6.Types.Danish ->
            Evergreen.V13.Types.Danish

        Evergreen.V6.Types.Dutch ->
            Evergreen.V13.Types.Dutch

        Evergreen.V6.Types.English ->
            Evergreen.V13.Types.English

        Evergreen.V6.Types.Estonian ->
            Evergreen.V13.Types.Estonian

        Evergreen.V6.Types.French ->
            Evergreen.V13.Types.French

        Evergreen.V6.Types.German ->
            Evergreen.V13.Types.German

        Evergreen.V6.Types.Greek ->
            Evergreen.V13.Types.Greek

        Evergreen.V6.Types.Hungarian ->
            Evergreen.V13.Types.Hungarian

        Evergreen.V6.Types.Italian ->
            Evergreen.V13.Types.Italian

        Evergreen.V6.Types.Japanese ->
            Evergreen.V13.Types.Japanese

        Evergreen.V6.Types.Lithuanian ->
            Evergreen.V13.Types.Lithuanian

        Evergreen.V6.Types.Norwegian ->
            Evergreen.V13.Types.Norwegian

        Evergreen.V6.Types.Polish ->
            Evergreen.V13.Types.Polish

        Evergreen.V6.Types.Portuguese ->
            Evergreen.V13.Types.Portuguese

        Evergreen.V6.Types.Romanian ->
            Evergreen.V13.Types.Romanian

        Evergreen.V6.Types.Russian ->
            Evergreen.V13.Types.Russian

        Evergreen.V6.Types.Slovak ->
            Evergreen.V13.Types.Slovak

        Evergreen.V6.Types.Spanish ->
            Evergreen.V13.Types.Spanish

        Evergreen.V6.Types.Thai ->
            Evergreen.V13.Types.Thai

        Evergreen.V6.Types.Ukrainian ->
            Evergreen.V13.Types.Ukrainian


migrate_Types_PlayingModel : Evergreen.V6.Types.PlayingModel -> Evergreen.V13.Types.PlayingModel
migrate_Types_PlayingModel old =
    { options = old.options |> migrate_Types_GameOptions
    , current = old.current |> migrate_Types_Card
    , picked = old.picked
    , queue = old.queue |> List.map migrate_Types_Card
    , score = old.score
    }


migrate_Types_Property : Evergreen.V6.Types.Property -> Evergreen.V13.Types.Property
migrate_Types_Property old =
    case old of
        Evergreen.V6.Types.Flag ->
            Evergreen.V13.Types.Flag

        Evergreen.V6.Types.Name ->
            Evergreen.V13.Types.Name


migrate_Types_SortingModel : Evergreen.V6.Types.SortingModel -> Evergreen.V13.Types.SortingModel
migrate_Types_SortingModel old =
    old
